import pybullet as p
import pybullet_data as pd
import time
import math

wheels = [1, 2, 3, 4]
wheelVelocities = [0, 0, 0, 0]
wheelDeltasTurn = [0.5, -0.5, 0.5, -0.5]
wheelDeltasFwd = [0.3, 0.3, 0.3, 0.3]

baseorn = p.getQuaternionFromEuler([3.1415, 0, 0.3])
baseorn = [0, 0, 0, 1]
baspos = [0,0,0]

nJoints = 6
nj_exceptBase = [1,2,3,4,5]
kukaEndEffectorIndex = 6

ikSolver = 0

prevPose = [0, 0, 0]
prevPose1 = [0, 0, 0]
hasPrevPose = 0

trailDuration = 10

def connection():
    client = p.connect(p.SHARED_MEMORY)
    if (client < 0):
        p.connect(p.GUI)

def configPhysicsEngine():
    p.setPhysicsEngineParameter(enableConeFriction=0)
    p.setAdditionalSearchPath(pd.getDataPath())
    p.setGravity(0, 0, -9.81)
    p.setRealTimeSimulation(0)
    p.configureDebugVisualizer(p.COV_ENABLE_TINY_RENDERER, 0)   
    
def loadObj():
    #armStartPos = [0, 0, 1]
    #armStartOrn = p.getQuaternionFromEuler([0, 0, math.pi])
    p.loadURDF("plane.urdf", [0, 0, -0.5])
    carId = p.loadURDF("AGV6/urdf/AGV6.urdf", basePosition=[0, 0, 0])
    kukaId = p.loadURDF("arm/urdf/arm.urdf",basePosition=[0, 0, 0], baseOrientation=p.getQuaternionFromEuler([0, 0, -math.pi]))

    paramList = set_joint_param()
    bp, bo = p.getBasePositionAndOrientation(kukaId)
    return carId, kukaId


def resetJointInitState(kukaId):
    jointPoses = [0, 0, 0, 0, math.pi / 2, 0]
    for i in range(6):
        # enable motor to move
        p.setJointMotorControl2(
            bodyIndex=kukaId,
            jointIndex=i,
            controlMode=p.POSITION_CONTROL,
            targetPosition=jointPoses[i],
            targetVelocity=0,
            force=500,
            positionGain=0.09,
            velocityGain=1,
        )


def chassis_control_auto1(huskyId):

    #wheelVelocities = [math.pi, math.pi, math.pi, math.pi]
    wheelVelocities = [1, 1, 1, 1]
    for i in range(len(wheels)):
        p.setJointMotorControl2(huskyId,
                                wheels[i],
                                p.VELOCITY_CONTROL,
                                targetVelocity=wheelVelocities[i],
                                force=2000)

def chassis_control_auto2(huskyId):

    #wheelVelocities = [math.pi, math.pi, math.pi, math.pi]
    wheelVelocities = [1, 1, 1, 1]
    for i in range(len(wheels)):
        p.setJointMotorControl2(huskyId,
                                wheels[i],
                                p.VELOCITY_CONTROL,
                                targetVelocity=wheelVelocities[i],
                                force=1100)


def chassis_control_from_keyboard(huskyId):
    keys = p.getKeyboardEvents()
    wheelVelocities = [0, 0, 0, 0]
    speed = 5.0
    for k in keys:
        if p.B3G_LEFT_ARROW in keys:
            for i in range(len(wheels)):
                wheelVelocities[i] = wheelVelocities[i] - speed * wheelDeltasTurn[i] * 1.2
        if p.B3G_RIGHT_ARROW in keys:
            for i in range(len(wheels)):
                wheelVelocities[i] = wheelVelocities[i] + speed * wheelDeltasTurn[i] * 1.2
        if p.B3G_UP_ARROW in keys:
            for i in range(len(wheels)):
                wheelVelocities[i] = wheelVelocities[i] + speed * wheelDeltasFwd[i] * 1.2
        if p.B3G_DOWN_ARROW in keys:
            for i in range(len(wheels)):
                wheelVelocities[i] = wheelVelocities[i] - speed * wheelDeltasFwd[i] * 1.2

    for i in range(len(wheels)):
        p.setJointMotorControl2(huskyId,
                                wheels[i],
                                p.VELOCITY_CONTROL,
                                targetVelocity=wheelVelocities[i],
                                force=2000)

    
def get_left_front_wheel_state(huskyId):
    worldPos, worldOrn = p.getLinkState(huskyId, 2)[:2]
    return worldPos, worldOrn

def get_arm_endefftector_state_pos_and_orn(kukaId):
    worldPos, worldOrn = p.getLinkState(kukaId, 5)[:2]
    return worldPos, worldOrn

def get_chassis_num_joints(huskyId):
    cnJ = p.getNumJoints(huskyId)
    return cnJ

def get_arm_num_joints(kukaId):
    anJ = p.getNumJoints(kukaId)
    return anJ

def chassis_joint_info(huskyId):
    for i in range(p.getNumJoints(huskyId)):
        print("[INFO] joint ", p.getJointInfo(huskyId, i))
        
def arm_joint_info(kukaId):
    for i in range(p.getNumJoints(kukaId)):
        print("[INFO] joint ", p.getJointInfo(kukaId, i))
        
def set_p2p_param():
    postionControlGp = []
    postionControlGp.append(p.addUserDebugParameter('X', -1.0, 2.5, 0))
    postionControlGp.append(p.addUserDebugParameter('Y', -1.0, 2.5, 0))
    postionControlGp.append(p.addUserDebugParameter('Z', 1.0, 2.5, 0.5))
    postionControlGp.append(p.addUserDebugParameter('Row', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('Pitch', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('Yaw', -math.pi, math.pi, 0)) 
    return postionControlGp

def set_joint_param():
    postionControlGp = []
    postionControlGp.append(p.addUserDebugParameter('j1', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('j2', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('j3', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('j4', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('j5', -math.pi, math.pi, 0))
    postionControlGp.append(p.addUserDebugParameter('j6', -math.pi, math.pi, 0)) 

    return postionControlGp

def configJointMotor(kukaID, param):
    p.setJointMotorControl2(kukaID, 0, p.POSITION_CONTROL, targetPosition=param[0])
    p.setJointMotorControl2(kukaID, 1, p.POSITION_CONTROL, targetPosition=param[1])
    p.setJointMotorControl2(kukaID, 2, p.POSITION_CONTROL, targetPosition=param[2])
    p.setJointMotorControl2(kukaID, 3, p.POSITION_CONTROL, targetPosition=param[3])
    p.setJointMotorControl2(kukaID, 4, p.POSITION_CONTROL, targetPosition=param[4])
    p.setJointMotorControl2(kukaID, 5, p.POSITION_CONTROL, targetPosition=param[5])


def moveTo1(tankId, nj):
    #jointPoses = p.calculateInverseKinematics(tankId, 5, pos, orn)
    jointPoses = [0, 0, 0, math.pi / 4, math.pi / 2, 0]
    print("pos", jointPoses)
    for i in range(nj):
        # enable motor to move
        p.setJointMotorControl2(
            bodyIndex=tankId,
            jointIndex=i,
            controlMode=p.POSITION_CONTROL,
            targetPosition=jointPoses[i],
            targetVelocity=0,
            force=500,
            positionGain=0.09,
            velocityGain=1,
        )

def moveTo2(tankId, nj):
    #jointPoses = p.calculateInverseKinematics(tankId, 5, pos, orn)
    jointPoses = [0, 0, 0, -math.pi / 4, math.pi / 2, 0]
    #print("pos", jointPoses)
    for i in range(nj):
        # enable motor to move
        p.setJointMotorControl2(
            bodyIndex=tankId,
            jointIndex=i,
            controlMode=p.POSITION_CONTROL,
            targetPosition=jointPoses[i],
            targetVelocity=0,
            force=500,
            positionGain=0.09,
            velocityGain=1,
        )


def menu_p2p_control(kukaId, Gp):
    paramList = []
    for i in range(6):
        paramList.append(p.readUserDebugParameter(Gp[i]))
    
    pos = [paramList[0], paramList[1], paramList[2]]
    ornAngle = [paramList[3], paramList[4], paramList[5]]
    
    # print("Pos: ", pos)
    # print("Orn: ", ornAngle)
    #moveTo(kukaId, pos, ornAngle, False)

    
def menu_joint_control(kukaId, Gp):
    param = []
    for i in range(6):
        param.append(p.readUserDebugParameter(Gp[i]))
    configJointMotor(kukaId, param)
    
    """worldPos, worldOrn = p.getLinkState(kukaId, kukaEndEffectorIndex)[:2]
    print(f"world Pos {worldPos} & world Orn {worldOrn}")
    print("\n\n=================================\n\n")"""


def initEnv():
    move_up = 1
    move_down = 0
    connection()
    configPhysicsEngine()
    carId, kukaId = loadObj()
    car2Id = p.loadURDF("AGV6/urdf/AGV6.urdf", basePosition=[0, 3.5, 0])
    watertankId = p.loadURDF("cube.urdf", basePosition=[0, 4.5, 0])
    resetJointInitState(kukaId)
    print("[INFO] Number of Arm Joints: ", get_arm_num_joints(kukaId))
    print("[INFO] Number of Chassis Joints: ", get_chassis_num_joints(carId))
    # stack arm on top of chassis 
    cid = p.createConstraint(kukaId, -1, carId, -1, jointType=p.JOINT_FIXED, jointAxis=[0, 0, 0],
                             parentFramePosition=[0, 0, 0],
                             childFramePosition=[0.2, 0.2, 0.25],
                             parentFrameOrientation=[0, 0, 0],
                             childFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]))
    cid2 = p.createConstraint(kukaId, -1, kukaId, 0, jointType=p.JOINT_PRISMATIC, jointAxis=[0, -1, 0],
                              parentFramePosition=[0, 0, 0],
                              childFramePosition=[0, 0, 0],
                              parentFrameOrientation=[0, 0, 0],
                              childFrameOrientation=p.getQuaternionFromEuler([0, 0,-math.pi]))
    cid3 = p.createConstraint(kukaId, 0, kukaId, 1, jointType=p.JOINT_PRISMATIC, jointAxis=[0, -1, 0],
                              parentFramePosition=[0, 0, 0],
                              childFramePosition=[0, 0, 0],
                              parentFrameOrientation=[0, 0, 0],
                              childFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]))
    cid4 = p.createConstraint(kukaId, 1, kukaId, 2, jointType=p.JOINT_PRISMATIC, jointAxis=[0, -1, 0],
                              parentFramePosition=[0, 0, 0],
                              childFramePosition=[0, 0, 0],
                              parentFrameOrientation=[0, 0, 0],
                              childFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]))
    cid5 = p.createConstraint(watertankId, -1, car2Id, -1, jointType=p.JOINT_FIXED, jointAxis=[0, 0, 0],
                             parentFramePosition=[0, 0, 0],
                             childFramePosition=[0.0, 0.0, 0.8],
                             parentFrameOrientation=[0, 0, 0],
                             childFrameOrientation=p.getQuaternionFromEuler([0, 0, 0]))

    time.sleep(2)
    p2pL = set_p2p_param()
    jointL = set_joint_param()
    fromPos = [[-0.75, -0.75, 1.5], [1.5, 1.5, 1.5]]
    toPos = [[1.5, 1.5, 1.5], [1, 1, 1]]

    while True:
        p.stepSimulation()
        chassis_control_auto1(carId)
        chassis_control_auto2(car2Id)
        pos = [float(0.8), float(0.8), float(1.5)]
        euler = [2.24, 1.6, 1.8]
        if move_up == 1:
            moveTo1(kukaId, 6)
            time.sleep(0.0003)

        elif move_down == 1:
            moveTo2(kukaId, 6)
            time.sleep(0.0003)

        if p.getJointState(kukaId, 3)[0] > 0.71:
            move_up = 0
            move_down = 1
        if p.getJointState(kukaId, 3)[0] < -0.71:
            move_up = 1
            move_down = 0
        
if __name__=="__main__":
    initEnv()
