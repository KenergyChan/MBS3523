#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2

import tensorflow as tf
from tensorflow import keras
from keras.models import load_model
import numpy as np
import time

t_old = 0
t_new = 0


def classifier_setup():
  facedetect = cv2.CascadeClassifier('src/haarcascade_frontalface_default.xml')
  font = cv2.FONT_HERSHEY_COMPLEX
  model = load_model('src/keras_model.h5')


def pub_setup():
  pub = rospy.Publisher('video_frames', Image, queue_size=10)
  rospy.init_node('webcam_pub', anonymous=True)
  cap = cv2.VideoCapture(0)
     
  # Used to convert between ROS and OpenCV images
  
         
if __name__ == '__main__':
  try:
    classifier_setup()
    pub = rospy.Publisher('video_frames', Image, queue_size=10)
    rospy.init_node('webcam_pub', anonymous=True)
    rate = rospy.Rate(10) # 10hz

    cap = cv2.VideoCapture(0)
     
  # Used to convert between ROS and OpenCV images
    br = CvBridge()
 
    while not rospy.is_shutdown():
      ret, frame = cap.read()

      faces = facedetect.detectMultiScale(frame, 1.3, 3)
      for x, y, w, h in faces:
        crop_img = frame[y:y + h, x:x + h]
        img = cv2.resize(crop_img, (224, 224))
        img = img.reshape(1, 224, 224, 3)
        prediction = model.predict(img)
        # print(prediction)
        classIndex = np.argmax(prediction)
        # print(classIndex)
        probabilityValue = np.amax(prediction)

        if probabilityValue > 0.6 and classIndex==0:
          rospy.loginfo('publishing video frame')
          pub.publish(br.cv2_to_imgmsg(img))
          rate.sleep()

    # Calculate FPS and display on upper left
      t_new = time.time()
      fps = 1 / (t_new - t_old)
      t_old = t_new

  except rospy.ROSInterruptException:
    pass
